<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>performance - Tag - Known, Unknown, Unknownable</title>
        <link>/tags/performance/</link>
        <description>performance - Tag - Known, Unknown, Unknownable</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>e850506@gmail.com (unknowntpo)</managingEditor>
            <webMaster>e850506@gmail.com (unknowntpo)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 13 Feb 2023 18:50:03 &#43;0800</lastBuildDate><atom:link href="/tags/performance/" rel="self" type="application/rss+xml" /><item>
    <title>Use `sync.Pool` to reduce memory consumption</title>
    <link>/syncpool/</link>
    <pubDate>Mon, 13 Feb 2023 18:50:03 &#43;0800</pubDate>
    <author>unknowntpo</author>
    <guid>/syncpool/</guid>
    <description><![CDATA[Identifying the problem To demonstrate the improvement of our code, I design a simple benchmark,
There are three ways we can get data from database.
Use []Author to hold the data (Structure Binding) Use [][]string to hold the data (Unify Container without sync.Pool) Use [][]string to hold the data, and use sync.Pool to reuse [][]string (Unify Container with sync.Pool) For row number between 1000 and 8000 to demonstrate the benefit of sync.]]></description>
</item>
<item>
    <title>Optimize a PARTITION - SELECT query up to 60x faster</title>
    <link>/idx-only-scan/</link>
    <pubDate>Sun, 12 Feb 2023 14:23:03 &#43;0800</pubDate>
    <author>unknowntpo</author>
    <guid>/idx-only-scan/</guid>
    <description><![CDATA[This post demonstrates my experience of optimizing a PARTITION - SELECT query, and how I made it up to 60x faster.
Original Query and the use case Our App is a simple excel data version control system, the data is organized by project, key and data is stored in seperated table called dbKey and dbData .
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create table dbKey ( id serial , project_id int, -- keys goes here -- NOTE: key can be 1.]]></description>
</item>
</channel>
</rss>
